import arrow

from flask import Flask, request
from flask_cors import CORS
from app.config import BaseConfig
from app.storage.minio import storage_client
from flask_migrate import Migrate
from app.database.db import db
from app.auth import login_manager, auth_bp, oauth


def create_app() -> Flask:
    app = Flask(__name__)

    app.url_map.strict_slashes = False

    app.config["SQLALCHEMY_DATABASE_URI"] = BaseConfig.DB_URI
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    # enable to print all queries generated by SQLAlchemy
    app.config["SQLALCHEMY_ECHO"] = True

    app.secret_key = BaseConfig.FLASK_SECRET

    init_minio()
    init_database(app, db)
    init_login_manager(app)
    register_blueprints(app)
    jinja2_filter(app)

    # Enable CORS on /api endpoints
    CORS(app, resources={r"/api/*": {"origins": "*"}})

    @app.teardown_appcontext
    def cleanup(resp_or_exc):
        db.session.remove()

    return app


def init_login_manager(app: Flask):
    login_manager.init_app(app)
    oauth.init_app(app)


def register_blueprints(app: Flask):
    app.register_blueprint(auth_bp)


def init_database(app, database):
    db.init_app(app)
    migrate = Migrate()
    migrate.init_app(app, database)


def jinja2_filter(app):
    def format_datetime(value):
        dt = arrow.get(value)
        return dt.humanize()

    app.jinja_env.filters['dt'] = format_datetime

    @app.context_processor
    def inject_stage_and_region():
        now = arrow.now()
        return dict(
            YEAR=now.year,
            NOW=now,
            URL=BaseConfig.URL,
            CANONICAL_URL=f"{BaseConfig.URL}{request.path}",
            BRAND_NAME=BaseConfig.BRAND_NAME,
            BRAND_URL=BaseConfig.BRAND_URL,
            SOCIALS=BaseConfig.SOCIALS,
            IMAGE_URL=BaseConfig.IMAGE_URL,
            IMAGE_PATHS=BaseConfig.IMAGE_PATHS,
        )


def init_minio():
    if not storage_client.bucket_exists(BaseConfig.MINIO_BUCKET):
        storage_client.make_bucket(BaseConfig.MINIO_BUCKET)
